{"ast":null,"code":"var _jsxFileName = \"/home/hyfbe14/Desktop/rhw-w3/HYF-React2-Homework/client/src/components/TodoList.jsx\";\nimport React from \"react\";\nimport { AddItem } from \"./AddItem\";\nimport { TodoItem } from \"./TodoItem\";\nexport class TodoList extends React.Component {\n  constructor() {\n    super();\n\n    this.componentDidMount = async () => {\n      const data = await fetch(\"/api/todos\");\n      const jsonData = await data.json();\n      this.setState({\n        items: jsonData\n      });\n    };\n\n    this.onAddItem = async newToDo => {\n      let items = this.state.items;\n      const response = await fetch(\"/api/todos\", {\n        method: \"POST\",\n        body: JSON.stringify({\n          id: items.length + 1,\n          title: newToDo,\n          completed: false\n        }),\n        headers: {\n          \"Content-Type\": \"application/json\"\n        }\n      });\n      const newItems = await response.json();\n      this.setState({\n        items: newItems\n      });\n      console.log(items);\n    };\n\n    this.handleChecked = async index => {\n      let item = this.state.items[index];\n      item.completed = !item.completed;\n      const response = await fetch(\"/api/todos/\".concat(item.id), {\n        method: \"PUT\",\n        body: JSON.stringify(item),\n        // Coordinate the body type with 'Content-Type'\n        headers: new Headers({\n          \"Content-Type\": \"application/json\"\n        })\n      });\n      const items = await response.json();\n      this.setState({\n        items\n      });\n    };\n\n    this.handleDelete = async index => {\n      let item = this.state.items[index];\n      const response = await fetch(\"/api/todos/\".concat(item.id), {\n        method: \"DELETE\",\n        body: JSON.stringify(item),\n        headers: new Headers({\n          \"Content-Type\": \"application/json\"\n        })\n      });\n      const items = await response.json();\n      this.setState({\n        items\n      });\n    };\n\n    this.handleEdit = async (index, title) => {\n      let items = this.state.items;\n      let item = items[index];\n      item.title = title;\n      const response = await fetch(\"/api/todos/\".concat(item.id), {\n        method: \"PUT\",\n        body: JSON.stringify(item),\n        headers: new Headers({\n          \"Content-Type\": \"application/json\"\n        })\n      });\n      const newItems = await response.json();\n      this.setState({\n        items: newItems\n      });\n    };\n\n    this.state = {\n      items: []\n    };\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96\n      },\n      __self: this\n    }, React.createElement(AddItem, {\n      onAddItem: this.onAddItem,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97\n      },\n      __self: this\n    }), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98\n      },\n      __self: this\n    }, this.state.items.map((value, index) => {\n      return React.createElement(TodoItem, {\n        handleChecked: this.handleChecked,\n        handleDelete: this.handleDelete,\n        handleEdit: this.handleEdit,\n        title: value.title,\n        completed: value.completed,\n        id: index,\n        key: index // you can't use it. Just used by map to optimize the rendering\n        ,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 101\n        },\n        __self: this\n      });\n    })));\n  }\n\n}","map":{"version":3,"sources":["/home/hyfbe14/Desktop/rhw-w3/HYF-React2-Homework/client/src/components/TodoList.jsx"],"names":["React","AddItem","TodoItem","TodoList","Component","constructor","componentDidMount","data","fetch","jsonData","json","setState","items","onAddItem","newToDo","state","response","method","body","JSON","stringify","id","length","title","completed","headers","newItems","console","log","handleChecked","index","item","Headers","handleDelete","handleEdit","render","map","value"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { AddItem } from \"./AddItem\";\nimport { TodoItem } from \"./TodoItem\";\n\nexport class TodoList extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      items: []\n    };\n  }\n\n  componentDidMount = async () => {\n    const data = await fetch(\"/api/todos\");\n    const jsonData = await data.json();\n    this.setState({\n      items: jsonData\n    });\n  };\n\n  // Step 1: change the onAddItem function to update the items on the server with a request\n\n  onAddItem = async newToDo => {\n    let items = this.state.items;\n    const response = await fetch(\"/api/todos\", {\n      method: \"POST\",\n      body: JSON.stringify({\n        id: items.length + 1,\n        title: newToDo,\n        completed: false\n      }),\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    });\n    const newItems = await response.json();\n    this.setState({ items: newItems });\n    console.log(items);\n  };\n\n  // FYI: here is a small example about how to handle the update of an item. Take inspiration from it to build the other requests!\n\n  handleChecked = async index => {\n    let item = this.state.items[index];\n    item.completed = !item.completed;\n    const response = await fetch(`/api/todos/${item.id}`, {\n      method: \"PUT\",\n      body: JSON.stringify(item), // Coordinate the body type with 'Content-Type'\n      headers: new Headers({\n        \"Content-Type\": \"application/json\"\n      })\n    });\n    const items = await response.json();\n    this.setState({\n      items\n    });\n  };\n\n  // Step 3: Do the same as you did on the client and on the server for handling the delete feature\n\n  handleDelete = async index => {\n    let item = this.state.items[index];\n    const response = await fetch(`/api/todos/${item.id}`, {\n      method: \"DELETE\",\n      body: JSON.stringify(item),\n      headers: new Headers({\n        \"Content-Type\": \"application/json\"\n      })\n    });\n    const items = await response.json();\n    this.setState({\n      items\n    });\n  };\n  // Step 5: update an item by doing the same call as we did for handling the check/uncheck feature. Here you only need to change the client side since the server side is already done ;)\n\n  handleEdit = async (index, title) => {\n    let items = this.state.items;\n    let item = items[index];\n    item.title = title;\n    const response = await fetch(`/api/todos/${item.id}`, {\n      method: \"PUT\",\n      body: JSON.stringify(item),\n      headers: new Headers({\n        \"Content-Type\": \"application/json\"\n      })\n    });\n    const newItems = await response.json();\n    this.setState({\n      items: newItems\n    });\n  };\n\n  render() {\n    return (\n      <div>\n        <AddItem onAddItem={this.onAddItem} />\n        <ul>\n          {this.state.items.map((value, index) => {\n            return (\n              <TodoItem\n                handleChecked={this.handleChecked}\n                handleDelete={this.handleDelete}\n                handleEdit={this.handleEdit}\n                title={value.title}\n                completed={value.completed}\n                id={index}\n                key={index} // you can't use it. Just used by map to optimize the rendering\n              />\n            );\n          })}\n        </ul>\n      </div>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}